# zip(iterabbles) - –æ–Ω–∞ —Å–æ–µ–¥–∏–Ω—è–µ—Ç –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏—Ç–µ—Ä–∏–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –º–µ–∂–¥—É —Å–æ–±–æ–π –≤ —Ç–∏–ø tuple –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä


# ls1 = [1,2,3]
# ls2 = [100, 200, 300]

# res = list(zip(ls1 , ls2))
# print(res)
# res = dict(zip(ls1 , ls2))
# print(res)

# -----------------------------------------------------------------------
# all(), any()
# all(iterable) - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Ç–µ—Ä–∏—Ä–∫–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏—Å—Ç–∏–Ω–∞ –∏–Ω–∞—á–µ False


# ls = [[1,2], 'stroka', True, 1]  # True
# ls = [[1,2], 'stroka', True, 1, ''] # False
# print(all(ls))


# ip = '10.255.12.155'
# ip2 = '10.255.1y.155'

# result = all(x.isdigit() for x in ip.split('.')) # True
# result2 = all(x .isdigit() for x in ip2.split('.')) # False
# print(result)
# print(result2)



# any- –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Ö–æ—Ç—è–±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–∏–Ω–∞

# ls = [0, 0, 0, 0] # False
# print(any(ls))
# ls2 = [0, 0, 0, 1] # False
# print(any(ls2)) # True


# ignore = ['rm -rf', 'sudo', 'reset', 'poweroff']

# command = input('Vvedite commandu: ')
# if any(x in command for x in ignore):
#     raise Exception('You do not have permision')

# print('OK')

# ============================================================================================

# –ê–Ω–æ–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - lambda(—Ç–∞–∫–∏–µ –∂–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)
# lambda —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–æ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ

# def sum_of_args(a, b):
#     res = a + b
#     return res

# print(sum_of_args(5, 15))



# func = lambda a, b:a + b  
# print(func(15,15))



# def myFunc(n):
#     return lambda a: a * n

# myDoubler = myFunc(2)
# myTripler = myFunc(3)
# print(myDoubler(50))
# print(myDoubler(123))
# print(myDoubler(7))

# print(myTripler(55))



# dict_ = {'John': 50_000, 'Jamie': 100_000_000, 'Aibek': 1_000_000, 'Aigerim': 15}

# res = sorted(dict_.items(), key=lambda x: x[1])
# print(res)
# ---------------------------------------------------------------------------------------------



# map(function, iterable) -> –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º iterable —Ñ—É–Ω–∫—Ü–∏—è–º –∫–æ—Ç–æ—Ä—ã–º –º—ã –ø–µ—Ä–µ–¥–∞–µ–º

# ls = ['one', 'two', 'three', 'four', 'five']
# res = list(map(str.upper, ls))
# print(res)

# for i in range(len(ls)):
#     ls[i] = ls[i].upper()
# print(ls)



# names = ['John', 'Sultan', 'Jamie', 'Aibek']
# -------------
# res = list(map(lambda name:f'Hello mr/mrs {name}', names))
# print(res)

# ------------

# def func(name):
#     return f'Hello mr/mrs {name}'

# res = []
# for name in names:
#     res.append(func(name))

# print(names)
# print(res)
# -----------------------------


# dict_ = {1: 2, 3: 4, 5: 6}
#         #{1: '2', 3: '4', 5: '6'}

# res = dict(map(
#     lambda x: (x[0], str(x[1])),
#     dict_.items()))

# print(res)



# TODO filter, reduce, enumarate, repeat 



'''
filter(function, iterable) - –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º —ç–ª–µ–º iterable —Ñ—É–Ω–∫ –∫–æ—Ç–æ—Ä—É—é –º—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 
–∏—Ç–µ—Ä–∞—å–æ—Ä —Å —Ç–µ–º–∏ —ç–ª–µ–º –¥–ª—è –∫–æ—Ç–æ—Ä —Ñ—É–Ω–∫ –≤–µ—Ä–Ω—É–ª–∞ True

'''

# ls = ['one', 'two', '', 'list', '100', '1' , 'john']

# res = []

# for x in ls:
#     if x.isdigit():
#         res.append(x)

# print(res)


# res = list(filter(str.isdigit, ls))
# print(res)
# ---------

# ls = ['john', 'codify', 'Aibek', 'bootcamp', 'ono', 'Kyrgyzstan', 'mountains']

# res = list(filter(lambda x: len(x) > 5, ls))
# print(res)
# ==========


# ls = [
#     {'name': 'Pthon', 'point': 10},
#     {'name': 'C++', 'point': 6},
#     {'name': 'Js', 'point': 8},
#     {'name': 'JAVA', 'point': 3},
#     {'name': 'C#', 'point': 0},
#     ]

# res = list(filter(lambda dict_: dict_['point'] > 7, ls))
# print(res)
# ----------------

# users = [
#  {"username": 'John', "comments": ["I love this content", "Realy Good"]},
#  {"username": 'Raychel', "comments": []},
#  {"username ": 'Steven', "comments": ["Bishkek", "Python"]},
#  {"username ": 'Hello', "comments": []},
#  {"username ": 'Kira', "comments": ["The best"]},
# ]
# res = list(filter(lambda x: x['comments'], users))
# print(res)

# res2 = list(filter(lambda x:not x['comments'], users))
# print(res2)
# ======================================================

# names = ['Aigerim', 'Sultan', 'John', 'Kira', 'Bob']
# new_names = list(map(lambda x: f'Hello mr/mrs {x}', filter(lambda x: len(x) > 5, names)))
                 
# print(new_names)


# ================================================================================
# enumerate - –æ–Ω–∞ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π —ç–ª–µ–º –≤–Ω—É—Ç—Ä–∏ iterable –µ–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º

# ls = ['one', 'two', 'three', 'four', 'five']

# res = list(enumerate(ls))
# print(res)     # [(0, 'one'), (1, 'two'), (2, 'three'), (3, 'four'), (4, 'five')]

# for i, x in enumerate(ls):
#     print(f'Index: {i}, Element: {x}')

'''
Index: 0, Element: one
Index: 1, Element: two
Index: 2, Element: three
Index: 3, Element: four
Index: 4, Element: five
'''
# --------------------------------------------------------------
'''
reduce - –§—É–Ω–∫—Ü–∏—è Reduce () –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ, 
—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
1. –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤—ã–º–∏ –¥–≤—É–º—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∏ 
—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è.
2. –ó–∞—Ç–µ–º —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–Ω–æ–≤–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º, –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –Ω–∞ —à–∞–≥–µ 1, –∏ —Å–ª–µ–¥—É—é—â–∏–º 
–∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ 
–Ω–µ –ø–æ—è–≤—è—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã.

'''
# from functools import reduce

# ls = [1,2,3,4,5]
# sum_ = reduce(lambda a, b: a + b, ls)
# res = reduce(lambda a, b: a * b, ls)
# print(sum_, res)
# ---------------------------------------------------------------------------------
# repeat

# for x in repeat(lambda x: x * 5, 5):
#     print(x)
# ========================================================================================
# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π
from itertools import repeat
from random import choices
from string import ascii_letters, digits
from statistics import mean

symbols = '_()$!%+-@#'

q_pass = int(input('Vvedite kolichestvo poroley: '))

result = {
    f(choices(ascii_letters, k=10), 
      choices(digits, k=5),
      choices(symbols, k=2))
    for f in repeat(lambda a,d,s: ''.join(set(a+d+s)),
     q_pass)
}

print(result)
print(f'Quantity of passwords: {len(result)}')
dlina = [len(x) for x in result]
print(f'Average len: {mean(dlina)}')




























# ==================================================================================================

"""
1) –î–∞–Ω —Å–ø–∏—Å–æ–∫ list_ = [1, 2, 3, 4]. –í—ã–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—Å–µ—Ö —ç—Ç–∏—Ö —á–∏—Å–µ–ª.
"""
# import functools

# list_ = [1, 2, 3, 4]

# sum = functools.reduce(lambda x, y: x + y, list_)
# print(sum)




"""
2) –î–∞–Ω —Å–ø–∏—Å–∫–∞ –∏–∑ —á–∏—Å–µ–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ —á–∏—Å–ª–∞ –±–æ–ª—å—à–µ —Ç—Ä—ë—Ö.
"""
# list_ = [1, 2, 3, 4]

# res = list(map(lambda x: x > 3, list_))
# print(res)



"""
3) –î–∞–Ω—ã —Å–ø–∏—Å–æ–∫ –∏–∑ —á–∏—Å–µ–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ –Ω—ë–º –µ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞.
"""
# list_ = [1, 2, 3, 4]

# res = list(map(lambda x: x < 0, list_))
# print(res)



"""
4) –î–∞–Ω —Å–ø–∏—Å–æ–∫, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —á–∏—Å–ª–∞–º–∏. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —ç—Ç–∏—Ö —á–∏—Å–µ–ª.
"""
# list_ = [1, 2, 3, 4]
# kvad_sum = list(map(lambda x: x ** 2, list_))
# print(kvad_sum)



"""
5) –î–∞–Ω —Å–ø–∏—Å–æ–∫ —Å —á–∏—Å–ª–∞–º–∏. –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞.
"""
# list_ = [1, 2, 3, 4]reduc
# res = list(filter(lambda x: x % 2 == 0, list_))
# print(res)


"""
6) –î–∞–Ω —Å–ø–∏—Å–æ–∫, —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏. –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç—Ä–æ–∫–∏, –¥–ª–∏–Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ 7 —Å–∏–º–≤–æ–ª–æ–≤.
"""
# list_ = ['55555', '666666', '999999999', '88888888']
# res = list(filter(lambda x: len(x) > 7, list_))
# print(res)



"""
7) –î–∞–Ω —Å–ø–∏—Å–æ–∫ list_ = [5, 6, 7, 8]. –í—ã–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —ç—Ç–∏—Ö —á–∏—Å–µ–ª.
"""
# from functools import reduce 
# list_ = [5, 6, 7, 8]
# res = reduce(lambda x, y: x*y, list_)
# print(res)


"""
üòç –î–∞–Ω —Å–ø–∏—Å–æ–∫, —Å —á–∏—Å–ª–∞–º–∏. –ü–æ—Å—á–∏—Ç–∞—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á—ë—Ç–Ω—ã—Ö –∏ –Ω–µ—á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ.
"""
# list_ = [1, 2, 3, 4, 5, 6]
# print(filter(lambda x: 'Chet:'+1 if x%2==0 else 'Ne_chet:'+1, list_))

"""
9) –î–∞–Ω —Å–ø–∏—Å–æ–∫ list_ = [-1, 2, 3, 0, 5, -3, 7,]. –ï—Å–ª–∏ —á–∏—Å–ª–æ –≤ —Å–ø–∏—Å–∫–µ –º–µ–Ω—å—à–µ 0, –∑–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞ False, –µ—Å–ª–∏ –±–æ–ª—å—à–µ, —Ç–æ –Ω–∞ True .
"""
# list_ = [-1, 2, 3, 0, 5, -3, 7,]
# res = list(map(lambda x: False if x < 0 else True, list_))
# print(res)



"""
10) –î–∞–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ –∏–º—ë–Ω. –ù–∞–π–¥–∏—Ç–µ —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–µ–π reduce.
"""
# from functools import reduce

# list_ = ['John', 'Ali', 'Aibek', 'Pain']

# res = reduce(lambda a, b: a if (a < b) else b, list_)

# print(res)

# 11 
# digits = '123456789'
# intt = int(digits)
# print(intt, type(intt))
# print(sum(intt))

# 12
# sum = int(input('sum: '))
# res = lambda sum: sum ** 2
# print(res(sum))


# 13
# sum = int(input('sum: '))
# sum2 = int(input('sum2: '))

# res = lambda x, y: sum ** sum2
# print(res(sum, sum2))


# 14

# names = input('name: ')

# res = list(map(lambda name: f'Hello {names}', names))
# print(res)

# 15

# num = [1,2,3,4,5,6,7,8,9,10,15,20]

# res = list(filter(lambda x: x % 5 == 0, num))
# print(res)
