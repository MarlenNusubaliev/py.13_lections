# –Ω–∞–π—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç –∏ –∫—É–± —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 100 –ª—é–±–æ–≥–æ —á–∏—Å–ª–∞

# num1 = 5
# ->{'num': 5, '2': 25, '3': 125, '100': 0.05}


# num1 = 5
# res = {'num': num1, '2': num1 ** 2, '3': num1 ** 3, '100': num1 / 100}
# print(res)

# num2 = 75
# res = {'num': num2, '2': num2 ** 2, '3': num2 ** 3, '100': num2 / 100}
# print(res)

# num3 = 1154
# res = {'num': num3, '2': num3 ** 2, '3': num3 ** 3, '100': num3 / 100}
# print(res)


# DRY - Don't repeat yourself

# def do_operations(num: int):
#     res = {'num': num, '2': num ** 2, '3': num ** 3, '100': num / 100}
#     print(res)

# do_operations(16)
# do_operations(4356)
# do_operations(31)
# do_operations(1298)
# do_operations(567)

# ===========================================================
'''
–§—É–∫–Ω—Ü–∏—è - —ç—Ç–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ , 
–∏ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å—Ç–æ–ª—å–∫–∞ —Ä–∞–∑ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ
'''

# def name_of_func(<a, b> #–ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏):
    # <body> # –∫–æ–¥ –∫–∞–∫–∞—è —Ç–æ –ª–æ–≥–∏–∫–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–∞–≤–∞—Ç—å –∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    #   <return> –æ–ø–µ—Ä–∞—Ç–æ—Ä –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    #name_of_func(5, 6 –∞—Ä–≥—É–º–µ–Ω—Ç—ã)

# –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫ - –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞–µ–º 
# –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –≤ —Ñ—É–Ω–∫, –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫


# –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫ - –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã –µ –º—ã –ø–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫ –æ–Ω–∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏


# print(len('string'))
# from typing import Iterable


# def our_len(obj: Iterable) -> str:
#     '''–í–æ–∑–≤—Ä–∞—à–∞–µ—Ç –¥–ª–∏–Ω—É –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞'''
#     print(obj)
#     i = 0
#     for _ in obj:
#         i += 1
#     return f'result: {i}'

# ls = [1,2,3,4,5]
# str1 = 'Hello world s vami John Snow!'

# print(our_len(ls))
# print(our_len(str1))

# def isEven(num):
#     return True if num % 2 == 0 else False

# result = isEven(15)
# print(result)

# def isEven(num: int) -> bool:
#     '''Return True or False while after checking number for even'''
#     return True if num % 2 == 0 else False
# result = isEven(456)
# print(result)

# ------------------------------------------------------------------------

# default –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

# def sum_of_args(a: int, b: int, c: int=0) -> int:
#     '''returns sum of given arguments'''
#     return a + b + c


# print(sum_of_args(5, 6, 7))
# print(sum_of_args(9, 123))

# ----------------------------------------------------------------------------

# –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

# def printParams(a, b, c):
#     print(a, 'is stored in param a')
#     print(b, 'is stored in param b')
#     print(c, 'is stored in param c')

# printParams(5, 10, 15) –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥
# (arguments)
# print()
# printParams(b=5, a=10, c=15)  –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥
# (keyword arguments)
# print()
# printParams(5, c=10, b=15)

# -----------------------------------------------------------------------
# –æ–ø–µ—Ä–∞—Ç–æ—Ä *
# a = [1,2,3]
# b = [4,5,6]

# c = [*a, *b]
# print(c)

# ---------------------------------------------------------------------

# *args, **kwargs

# def get_some_dat(a, b, *args, **kwargs): 
#     print('parametry a –∏ b:', a, b)
#     print('–∞—Ä–≥—É–º–µ–Ω—Ç—ã', args)
#     print('–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã', kwargs)

# get_some_dat(1,2,3,4,5, x=5, car='BMW')

# def printScores(student: str, *scores)-> None:
#     '''prints info about student to terminal'''
#     print(f'Name of student: {student}')
#     print(f'AVG: {round(sum(scores) / len(scores), 1)}')
#     print(scores, type(scores), '!!!!')
#     for x in scores:
#         print('Scores:', x)

# printScores('John Snow', 5, 5, 5, 5, 4, 4, 2)


# def printPetNames(owner: str, **pets):
#     print(f'owner name {owner}')
#     print(pets, type(pets), '!!!!!!!!!!!!!!!!!!')
#     for pet, name in pets.items():
#         if type(name) == list:
#             print(f'{pet}', *name,)
#         else:
#             print(f'{pet}: {name}')
#         # print(f'{key}: {pets[key]}' if type(pets[key]) != list else f'{key}')

# printPetNames('John Snow', dog='Pluto', cat='Barsik', fish=['Nemo', 'Dori', 'Golden'], turtle='Leonardo')


# -------------------------------------------------------------------------------------------

# from random import choice, shuffle
# from string import ascii_letters, digits, punctuation

# symbols = ascii_letters + digits
# # print(symbols)

# def generate_password(len_: int=8) -> str:
#     '''Function generate random string for password parameter len needs to give lenghts of password,
#     if blank len_ = 8'''

#     res = [choice(symbols) for _ in range(len_ -2)] + [choice(punctuation) for _ in range(2)]
#     shuffle(res)
#     return ''.join(res)

# print(generate_password())
# print(generate_password(12))
# print(generate_password(16))
# print(generate_password(9))


# ================================================================================================

"""
1) –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å 2 —á–∏—Å–ª–∞, —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –∏—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ–∂–µ–Ω–∏—è.
"""
# def myFn(a: int, b: int):
#     res = a + b
#     print(res)
# myFn(5, 10)

"""
2) –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å—Ç—Ä–æ–∫—É. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–æ–¥–∏—Ç—å –¥–ª–∏–Ω—É —ç—Ç–æ–π 
—Å—Ç—Ä–æ–∫–∏(–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é len).
"""
# def myFn(obj: str):
#     print(obj)
#     i = 0
#     for _ in obj:
#         i += 1
#     return f'Dlina str: {i}'

# a = 'John Snow'
# print(myFn(a))

"""
3) –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞. –ó–∞–¥–∞—á–∞ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ 
–≤—ã–≤–æ–¥–∏—Ç—å —Ç–∏–ø –ø—Ä–∏–Ω—è—Ç—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
"""
# def myFn(a, b):
#     print(type(a))
#     print(type(b))
# myFn(15, 'ppp')


"""
4) –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å 2 —á–∏—Å–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Ö –¥–µ–ª–µ–Ω–∏—è.
"""
# def myFn(a: int, b: int):
#     res = a / b
#     print(res)
# myFn(15, 3)

"""
5) –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å. –ü—Ä–æ–π–¥–∏—Ç–µ—Å—å –ø–æ —Å–ª–æ–≤–∞—Ä—é —Ü–∏–∫–ª–æ–º –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ
 –≤—Å–µ –µ–≥–æ –∫–ª—é—á–∏
"""
# def myFn(a: dict):
#     for k in a.keys():
#         print(k)

# b = {'1': 111, '2': 2222}
# myFn(b)

"""
6) –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç "It's odd number" –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ –Ω–µ –∫—Ä–∞—Ç–Ω–æ –¥–≤—É–º –∏
 "It's even number" –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
"""

# def myFn(a):
#     if a % 2 == 0:
#         print("It's odd number") 
#     else:
#         print("It's even number")
# myFn(11)

"""
7) –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º.
 –ü—Ä–æ–±–µ–ª—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä —É—á–∏—Ç—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
(–ü–∞–ª–∏–Ω–¥—Ä–æÃÅ–º, –ø–µÃÅ—Ä–µ–≤–µ—Ä—Ç–µ–Ω—å ‚Äî —á–∏—Å–ª–æ, –±—É–∫–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ, —Å–ª–æ–≤–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç, –æ–¥–∏–Ω–∞–∫–æ–≤–æ —á–∏—Ç–∞—é—â–µ–µ—Å—è –≤
 –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–æ 101; —Å–ª–æ–≤–∞ "–∫–æ–∫", "—Ç–æ–ø–æ—Ç", "–∫–æ–º–æ–∫" –∏ —Ç.–¥.)
"""
# def myFn(a: str):
#     if a == a[::-1]:
#         print('–ø–∞–ª–∏–Ω–¥—Ä–æ–º')
#     else:
#         print('–Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º')
# myFn('marlen')


"""
üòç –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–≤–∞ —á–∏—Å–ª–∞. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–≤–Ω–∏—Ç—å —ç—Ç–∏ —á–∏—Å–ª–∞
 –º–µ–∂–¥—É —Å–æ–±–æ–π –∏ –≤—ã–≤–µ—Å—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
"""
# def myFn(z: int, x:int):
#     if z > x:
#         print(z)
#     else:
#         print(x)  

# a = int(input('1: '))
# b = int(input('2: '))

# myFn(a, b)

"""
9) –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ.
"""
# def f(a):
# 	b = 1
# 	i = 0
# 	while i < len(a):
# 		b = int(a[i]) * b
# 		i += 1
# 	return b
		

# a = list(input('num: '))
# print(f(a))

"""
10) –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö –µ–≥–æ —Ü–∏—Ñ—Ä.
 –ù–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–æ 123 --> 6
"""


# def f(a):
# 	b = 0
# 	i = 0
# 	while i < len(a):
# 		b = int(a[i]) + b
# 		i += 1
# 	return b



# a = input('num: ')
# print(f(a))




# chat bot